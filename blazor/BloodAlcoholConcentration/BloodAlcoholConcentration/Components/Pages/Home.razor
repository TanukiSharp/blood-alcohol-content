@page "/"

<PageTitle>Home</PageTitle>

Drink quantity: <input type="number" @bind="alcoholQuantity" @oninput="Recompute"/> (in liters)<br/>
@* Alcohol percent: <input type="number" @bind="alcoholPercent" @bind:after="Recompute"/> <br/>
Body weight: <input type="number" @bind="bodyWeight" @bind:after="Recompute"/> (in kilograms)<br/>
Gender: <select @bind="gender" @bind:after="Recompute">
    <option value="Male">Male</option>
    <option value="Female">Female</option>
    </select> <br/>
Elimination rate: <input type="number" @bind="eliminationRate" @bind:after="Recompute"/> (default is @AverageHumanAlcoholEliminationRate)<br/>
Time elapsed: <input type="number" @bind="elapsedTime" @bind:after="Recompute"/> (in hours)<br/>
 *@<br/>
BAC: @outputBloodAlcoholConcentration <br/>
Time to zero: @outputTimeToZero <br/>

@code {
    private double alcoholQuantity { get; set; }
    private double alcoholPercent { get; set; }
    private double bodyWeight { get; set; }
    private Gender gender { get; set; }
    private double eliminationRate  { get; set; } = AverageHumanAlcoholEliminationRate;
    private double elapsedTime { get; set; }

    private double outputBloodAlcoholConcentration = 3;
    private TimeSpan outputTimeToZero;


    public const double AlcoholVolumicMass = 0.798; // g/L
    public const double AverageHumanAlcoholEliminationRate = 0.015;

    /*
    public enum VolumeUnit
    {
    Liters,
    CentiLiters,
    MilliLiters,
    }

    public readonly struct Volume
    {
    private readonly double value;
    private readonly VolumeUnit unit;

    private Volume(double value, VolumeUnit unit)
    {
    this.value = value;
    this.unit = unit;
    }

    public static Volume operator *(Volume volume, double value)
    {
    return new Volume(volume.value * value, volume.unit);
    }

    public static Volume operator /(Volume volume, double value)
    {
    return new Volume(volume.value / value, volume.unit);
    }

    public static Volume FromLiters(double value)
    {
    return new Volume(value, VolumeUnit.Liters);
    }

    public static Volume FromCentiLiters(double value)
    {
    return new Volume(value, VolumeUnit.CentiLiters);
        }

        public static Volume FromMilliLiters(double value)
    {
    return new Volume(value, VolumeUnit.MilliLiters);
        }

    public double ToLiters()
    {
    if (unit == VolumeUnit.CentiLiters)
    {
    return value / 100.0;
    }

    if (unit == VolumeUnit.Liters)
    {
    return value;
    }

    return value / 1000.0;
        }


        public double ToCentiLiters()
        {
        if (unit == VolumeUnit.CentiLiters)
        {
        return value;
        }

        if (unit == VolumeUnit.Liters)
        {
        return value * 100.0;
        }

        return value / 10.0;
        }

        public double ToMilliLiters()
        {
        if (unit == VolumeUnit.CentiLiters)
        {
    return value * 10.0;
    }

    if (unit == VolumeUnit.Liters)
    {
    return value * 1000.0;
    }

    return value / 1000.0;
    }
    }
    */

    public enum Gender
    {
        Female,
        Male,
    }

    /// <summary>
    /// Compute distribution mass.
    /// </summary>
    /// <param name="bodyWeight">Body weight in grams.</param>
    /// <param name="gender">Gender.</param>
    /// <returns>Returns body distribution mass in grams.</returns>
    private double ComputeDistributionMass(double bodyWeight, Gender gender)
    {
        double distributionRate = gender == Gender.Male ? 0.68 : 0.55;

        return bodyWeight * distributionRate;
    }

    /// <summary>
    /// Compute alcohol mass.
    /// </summary>
    /// <param name="beverageQuantity">In liters.</param>
    /// <param name="alcoholPercentage">Unitless percentage.</param>
    /// <returns>Returns the mass of pure alcohol in grams.</returns>
    private double ComputeAlcoholMass(double beverageQuantity, double alcoholPercentage)
    {
        return beverageQuantity * (alcoholPercentage / 100.0) * AlcoholVolumicMass;
    }

    private double ComputeBloodAlcoholConcentration(double bloodAlcoholContentPercent, double alcoholEliminationRate, TimeSpan elapsedTime)
    {
        return bloodAlcoholContentPercent - (elapsedTime.TotalHours * alcoholEliminationRate);
    }

    private TimeSpan ComputeTimeToZeroBloodAlcoholConcentration(double bloodAlcoholContentPercent, double alcoholEliminationRate)
    {
        return TimeSpan.FromHours(bloodAlcoholContentPercent / alcoholEliminationRate);
    }

    public (double, TimeSpan) ComputeBloodAlcoholConcentration(double beverageQuantity, double alcoholPercentage, double bodyWeight, Gender gender, double alcoholEliminationRate, TimeSpan elapsedTime)
    {
        double alcoholMass = ComputeAlcoholMass(beverageQuantity, alcoholPercentage);
        double distributionMass = ComputeDistributionMass(bodyWeight * 1000.0, gender);

        double bloodAlcoholContentPercent = (alcoholMass / distributionMass) * 100.0;

        double bloodAlcoholConcentration = ComputeBloodAlcoholConcentration(bloodAlcoholContentPercent, alcoholEliminationRate, elapsedTime);
        TimeSpan timeToZero = ComputeTimeToZeroBloodAlcoholConcentration(bloodAlcoholContentPercent, alcoholEliminationRate);

        return (bloodAlcoholConcentration, timeToZero);
    }

    private void Recompute(ChangeEventArgs e)
    {
        Console.WriteLine("CONNARD!");
        (outputBloodAlcoholConcentration, outputTimeToZero) = ComputeBloodAlcoholConcentration(alcoholQuantity, alcoholPercent, bodyWeight, gender, eliminationRate, TimeSpan.FromHours(elapsedTime));
    }
}
